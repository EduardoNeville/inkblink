services:
  db:
    image: postgres:15-alpine3.20
    env_file:
        - .env
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      args:
        VITE_SERVER_ENDPOINT: ${VITE_SERVER_ENDPOINT}
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - PSQL_DATABASE=${PSQL_DATABASE}
      - FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.routers.app.service=frontend-service"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.service=api-service"
      - "traefik.http.services.api-service.loadbalancer.server.port=8080"
    networks:
      - app-network

  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
    ports:
      - "8000:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL} 
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "16543:80"
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    networks:
      - app-network

volumes:
  postgres-db-volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data

networks:
  app-network:
    driver: bridge
